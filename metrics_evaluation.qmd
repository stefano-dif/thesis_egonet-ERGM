---
title: "metrics_evaluation"
format: html
editor: visual
---

```{r}
list_to_igraph <- function(l){
  res <- list()
  for (i in 1:length(l)){
    res[[i]] <- asIgraph(l[[i]])
  } 
  return(res)
}

list_to_network <- function(l){
  res <- list()
  for (i in 1:length(l)){
    res[[i]] <- asNetwork(l[[i]])
  } 
  return(res)
}

list_extract_largestcomponent <- function(l){
  #list of igraph objects
  res <- list()
  for (i in 1:length(l)){
    res[[i]] <- largest_component(l[[i]])
  } 
  return(res)
}

```

### Coworkers Networks

```{r}
n_nodes <- 10000
num_networks <- 10
max_nodes <- 1777*(1777-1)/2

meandeg_cow <- as.numeric(as.numeric(names(degreedist(egor_IT_cow))) %*% degreedist(egor_IT_cow))
```

```{r}
er_list_cow <- list()

for (i in 1:num_networks) {
  net <- sample_gnp(n = n_nodes, p = (meandeg_cow/(10000)))
  net <- asNetwork(net)
  
  er_list_cow[[i]] <- net
}
```

```{r}
ba_list_cow <- list()

for (i in 1:num_networks) {
  net <- sample_pa(n = n_nodes, m = meandeg_cow/2, directed = FALSE)
  net <- asNetwork(net)
  
  ba_list_cow[[i]] <- net
}
```

```{r}
ergm2_list_cow <- list()

for (i in 1:num_networks) {
  net <- simulate(m2_88_IT_cow,
                     nsim = 1, popsize = n_nodes,
                     seed = 1234, verbose = TRUE)
  
  ergm2_list_cow[[i]] <- net
}
```

```{r}
er_list_cow_ig <- list_to_igraph(er_list_cow)
ba_list_cow_ig <- list_to_igraph(ba_list_cow)
ergm2_list_cow_ig <- list_to_igraph(ergm2_list_cow)
```

```{r}
er_list_cow_ig_lc <- list_extract_largestcomponent(er_list_cow_ig)
ba_list_cow_ig_lc <- list_extract_largestcomponent(ba_list_cow_ig)
ergm2_list_cow_ig_lc <- list_extract_largestcomponent(ergm2_list_cow_ig)
```

```{r}
er_list_cow_lc <- list_to_network(er_list_cow_ig_lc)
ba_list_cow_lc <- list_to_network(ba_list_cow_ig_lc)
ergm2_list_cow_lc <- list_to_network(ergm2_list_cow_ig_lc)
```

### Coworkers Metrics

```{r}
#Avg degree and st. dev of degree

k_scores_er_cow <- c()
sdk_scores_er_cow <- c()
for (i in 1:num_networks){
  k_scores_er_cow[i] <- mean(degree(er_list_cow_ig[[i]]))
  sdk_scores_er_cow[i] <- sd(degree(er_list_cow_ig[[i]]))
}

k_scores_ba_cow <- c()
sdk_scores_ba_cow <- c()
for (i in 1:num_networks){
  k_scores_ba_cow[i] <- mean(degree(ba_list_cow_ig[[i]]))
  sdk_scores_ba_cow[i] <- sd(degree(ba_list_cow_ig[[i]]))
}

k_scores_ergm_cow <- c()
sdk_scores_ergm_cow <- c()
for (i in 1:num_networks){
  k_scores_ergm_cow[i] <- mean(degree(ergm2_list_cow_ig[[i]]))
  sdk_scores_ergm_cow[i] <- sd(degree(ergm2_list_cow_ig[[i]]))
}


```

```{r}
mean(k_scores_er_cow)
mean(k_scores_ba_cow)
mean(k_scores_ergm_cow)

mean(sdk_scores_er_cow)
mean(sdk_scores_ba_cow)
mean(sdk_scores_ergm_cow)
```

```{r}
#Avg distance and st. dev of distances
d_scores_er_cow <- c()
sdd_scores_er_cow <- c()
for (i in 1:num_networks){
  d_scores_er_cow[i] <- mean_distance(er_list_cow_ig_lc[[i]])
  
  dists <- distances(er_list_cow_ig_lc[[i]])
  avg_dists <- apply(dists, 1, mean)
  sdd_scores_er_cow[i] <- sd(avg_dists)
}

d_scores_ba_cow <- c()
sdd_scores_ba_cow <- c()
for (i in 1:num_networks){
  d_scores_ba_cow[i] <- mean_distance(ba_list_cow_ig_lc[[i]])
  
  dists <- distances(ba_list_cow_ig_lc[[i]])
  avg_dists <- apply(dists, 1, mean)
  sdd_scores_ba_cow[i] <- sd(avg_dists)
}

d_scores_ergm_cow <- c()
sdk_scores_ergm_cow <- c()
for (i in 1:num_networks){
  d_scores_ergm_cow[i] <- mean_distance(ergm2_list_cow_ig_lc[[i]])
  
  dists <- distances(ergm2_list_cow_ig_lc[[i]])
  avg_dists <- apply(dists, 1, mean)
  sdk_scores_ergm_cow[i] <- sd(avg_dists)
}


```

```{r}
mean(d_scores_er_cow)
mean(d_scores_ba_cow)
mean(d_scores_ergm_cow)

mean(sdd_scores_er_cow)
mean(sdd_scores_ba_cow)
mean(sdd_scores_ergm_cow)
```

```{r}
#average clustering and global clustering
avc_scores_er_cow <- c()
glc_scores_er_cow <- c()
for (i in 1:num_networks){
  avc_scores_er_cow[i] <- mean(transitivity(er_list_cow_ig[[i]], type = "local"), na.rm = T)
  glc_scores_er_cow[i] <- transitivity(er_list_cow_ig[[i]])
}

avc_scores_ba_cow <- c()
glc_scores_ba_cow <- c()
for (i in 1:num_networks){
  avc_scores_ba_cow[i] <- mean(transitivity(ba_list_cow_ig[[i]], type = "local"), na.rm = T)
  glc_scores_ba_cow[i] <- transitivity(ba_list_cow_ig[[i]])
}

avc_scores_ergm_cow <- c()
glc_scores_ergm_cow <- c()
for (i in 1:num_networks){
  avc_scores_ergm_cow[i] <- mean(transitivity(ergm2_list_cow_ig[[i]], type = "local"), na.rm = T)
  glc_scores_ergm_cow[i] <- transitivity(ergm2_list_cow_ig[[i]])
}

```

```{r}
mean(avc_scores_er_cow)
mean(avc_scores_ba_cow)
mean(avc_scores_ergm_cow)

mean(glc_scores_er_cow)
mean(glc_scores_ba_cow)
mean(glc_scores_ergm_cow)
```

```{r}
# Compute betweenness centrality 

bet_scores_er_cow <- c()
for (i in 1:num_networks){
  bet_scores_er_cow[i] <- mean(betweenness(er_list_cow_ig_lc[[i]])/(10000^2))
}

bet_scores_ba_cow <- c()
for (i in 1:num_networks){
  bet_scores_ba_cow[i] <- mean(betweenness(ba_list_cow_ig_lc[[i]])/(10000^2))
}

bet_scores_ergm_cow <- c()
for (i in 1:num_networks){
  bet_scores_ergm_cow[i] <- mean(betweenness(ergm2_list_cow_ig_lc[[i]])/(10000^2))
}

```

```{r}
mean(bet_scores_er_cow) %>% format(scientific = TRUE)
mean(bet_scores_ba_cow) %>% format(scientific = TRUE)
mean(bet_scores_ergm_cow) %>% format(scientific = TRUE)
```

```{r}
# Compute closeness centrality 

cl_scores_er_cow <- c()
for (i in 1:num_networks){
  cl_scores_er_cow[i] <- mean(closeness(er_list_cow_ig_lc[[i]]))
}

cl_scores_ba_cow <- c()
for (i in 1:num_networks){
  cl_scores_ba_cow[i] <- mean(closeness(ba_list_cow_ig_lc[[i]]))
}

cl_scores_ergm_cow <- c()
for (i in 1:num_networks){
  cl_scores_ergm_cow[i] <- mean(closeness(ergm2_list_cow_ig_lc[[i]]))
}

```

```{r}
mean(cl_scores_er_cow) %>% format(scientific = TRUE)
mean(cl_scores_ba_cow) %>% format(scientific = TRUE)
mean(cl_scores_ergm_cow) %>% format(scientific = TRUE)
```

```{r}
# Compute eigen centrality 

ei_scores_er_cow <- c()
for (i in 1:num_networks){
  ei_scores_er_cow[i] <- mean(eigen_centrality(er_list_cow_ig_lc[[i]])$vector)
}

ei_scores_ba_cow <- c()
for (i in 1:num_networks){
  ei_scores_ba_cow[i] <- mean(eigen_centrality(ba_list_cow_ig_lc[[i]])$vector)
}

ei_scores_ergm_cow <- c()
for (i in 1:num_networks){
  ei_scores_ergm_cow[i] <- mean(eigen_centrality(ergm2_list_cow_ig_lc[[i]])$vector)
}
```

```{r}
mean(ei_scores_er_cow)
mean(ei_scores_ba_cow)
mean(ei_scores_ergm_cow)
```

```{r}
# Centralization

c1_scores_er_cow <- c()
c2_scores_er_cow <- c()
c3_scores_er_cow <- c()
for (i in 1:num_networks){
  c1_scores_er_cow[i] <- centr_betw(er_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c2_scores_er_cow[i] <- centr_clo(er_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c3_scores_er_cow[i] <- centr_eigen(er_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
}

c1_scores_ba_cow <- c()
c2_scores_ba_cow <- c()
c3_scores_ba_cow <- c()
for (i in 1:num_networks){
  c1_scores_ba_cow[i] <- centr_betw(ba_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c2_scores_ba_cow[i] <- centr_clo(ba_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c3_scores_ba_cow[i] <- centr_eigen(ba_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
}

c1_scores_ergm_cow <- c()
c2_scores_ergm_cow <- c()
c3_scores_ergm_cow <- c()
for (i in 1:num_networks){
  c1_scores_ergm_cow[i] <- centr_betw(ergm2_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c2_scores_ergm_cow[i] <- centr_clo(ergm2_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c3_scores_ergm_cow[i] <- centr_eigen(ergm2_list_cow_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
}
```

```{r}
mean(c1_scores_er_cow)
mean(c1_scores_ba_cow)
mean(c1_scores_ergm_cow)

mean(c2_scores_er_cow)
mean(c2_scores_ba_cow)
mean(c2_scores_ergm_cow)

mean(c3_scores_er_cow)
mean(c3_scores_ba_cow)
mean(c3_scores_ergm_cow)

```

```{r}
g1 <- er_list_cow_ig[[1]]
g2 <- ba_list_cow_ig[[1]]
g3 <- ergm2_list_cow_ig[[1]]
```

```{r}
data_ER <- tibble(degree = degree(g1), network_type = "ER")
data_BA <- tibble(degree = degree(g2), network_type = "BA")
data_ERGM <- tibble(degree = degree(g3), network_type = "ERGM")

combined_data <- bind_rows(data_ER, data_BA, data_ERGM)

ggplot(combined_data, aes(x = degree, fill = network_type)) +
  geom_histogram(alpha = 0.6, position = "identity")+
  xlim(0, 30)+
  xlab("Degree") +
  ylab("Frequency") +
  labs(fill = "Network Type")+
   theme(
    legend.position = c(0.8, 0.8))
```

```{r}
data_ER <- tibble(clustering = transitivity(g1, type = "local"), network_type = "ER")
data_BA <- tibble(clustering = transitivity(g2, type = "local"), network_type = "BA")
data_ERGM <- tibble(clustering = transitivity(g3, type = "local"), network_type = "ERGM")

combined_data <- bind_rows(data_ER, data_BA, data_ERGM)

ggplot(combined_data, aes(x = clustering, fill = network_type)) +
  geom_histogram(alpha = 0.6, position = "identity") + 
  xlab("Clustering") +
  ylab("Frequency") +
  labs(fill = "Network Type")+
   theme(
    legend.position = c(0.8, 0.8))
```

```{r}
diameter(g1) 
diameter(g2) 
diameter(g3) 
```

```{r}
d1 <- distances(er_list_cow_ig_lc[[i]])
d1 <- apply(d1, 1, mean)
  
d2 <- distances(ba_list_cow_ig_lc[[i]])
d2 <- apply(d2, 1, mean)
  
d3 <- distances(ergm2_list_cow_ig_lc[[i]])
d3 <- apply(d3, 1, mean)
```

```{r}
data_ER <- tibble(distance = d1, network_type = "ER")
data_BA <- tibble(distance = d2, network_type = "BA")
data_ERGM <- tibble(distance = d3, network_type = "ERGM")

combined_data <- bind_rows(data_ER, data_BA, data_ERGM)

ggplot(combined_data, aes(x = distance, fill = network_type)) +
  geom_histogram(alpha = 0.5, position = "identity")+
  xlab("Distance") +
  ylab("Frequency") +
  labs(fill = "Network Type")+
   theme( legend.position = c(0.8, 0.8))
```

```{r}
tibble(age = get.vertex.attribute(g3, "age_group"),
      degree = degree(g3)) %>% 
  count(age, degree) %>% 
  mutate(freq = n/sum(n))%>% 
  ggplot()+
  geom_col(mapping = aes(x = degree, y = freq, fill = age), position = "fill", width = 0.8)+
  xlab("Degree") + ylab("Relative frequency")+
  xlim(0, 30)
```

```{r}
degreedist(egor_IT_cow, by = "age_group", freq = T) %>% 
  as_tibble() %>% 
  mutate(degree = as.numeric(degree), Age = age_group) %>% 
  uncount(weights = n) %>% 
  ggplot()+
  geom_boxplot(mapping = aes(x = Age, y = degree), alpha = 1)+
  geom_boxplot(data = tibble(Age = get.vertex.attribute(g3, "age_group"),
      degree = degree(g3)), aes(x = Age, y = degree, color = Age), alpha = 0.5)+
  xlab("Age") + ylab("Degree")
```

### Friends Networks

```{r}
n_nodes <- 10000
num_networks <- 10
max_nodes <- 1777*(1777-1)/2

meandeg_fr <- as.numeric(as.numeric(names(degreedist(egor_IT_fr))) %*% degreedist(egor_IT_fr))
```

```{r}
er_list_fr <- list()

for (i in 1:num_networks) {
  net <- sample_gnp(n = n_nodes, p = (meandeg_fr/(10000)))
  net <- asNetwork(net)
  
  er_list_fr[[i]] <- net
}
```

```{r}
ba_list_fr <- list()

for (i in 1:num_networks) {
  net <- sample_pa(n = n_nodes, m = meandeg_fr/2, directed = FALSE)
  net <- asNetwork(net)
  
  ba_list_fr[[i]] <- net
}
```

```{r}
ergm2_list_fr <- list()

for (i in 1:num_networks) {
  net <- simulate(m2_108_IT_fr,
                     nsim = 1, popsize = n_nodes,
                     seed = 1234, verbose = TRUE)
  
  ergm2_list_fr[[i]] <- net
}
```

```{r}
er_list_fr_ig <- list_to_igraph(er_list_fr)
ba_list_fr_ig <- list_to_igraph(ba_list_fr)
ergm2_list_fr_ig <- list_to_igraph(ergm2_list_fr)
```

```{r}
er_list_fr_ig_lc <- list_extract_largestcomponent(er_list_fr_ig)
ba_list_fr_ig_lc <- list_extract_largestcomponent(ba_list_fr_ig)
ergm2_list_fr_ig_lc <- list_extract_largestcomponent(ergm2_list_fr_ig)
```

```{r}
er_list_fr_lc <- list_to_network(er_list_fr_ig_lc)
ba_list_fr_lc <- list_to_network(ba_list_fr_ig_lc)
ergm2_list_fr_lc <- list_to_network(ergm2_list_fr_ig_lc)
```

### Friends Metrics

```{r}
#Avg degree and st. dev of degree

k_scores_er_fr <- c()
sdk_scores_er_fr <- c()
for (i in 1:num_networks){
  k_scores_er_fr[i] <- mean(degree(er_list_fr_ig[[i]]))
  sdk_scores_er_fr[i] <- sd(degree(er_list_fr_ig[[i]]))
}

k_scores_ba_fr <- c()
sdk_scores_ba_fr <- c()
for (i in 1:num_networks){
  k_scores_ba_fr[i] <- mean(degree(ba_list_fr_ig[[i]]))
  sdk_scores_ba_fr[i] <- sd(degree(ba_list_fr_ig[[i]]))
}

k_scores_ergm_fr <- c()
sdk_scores_ergm_fr <- c()
for (i in 1:num_networks){
  k_scores_ergm_fr[i] <- mean(degree(ergm2_list_fr_ig[[i]]))
  sdk_scores_ergm_fr[i] <- sd(degree(ergm2_list_fr_ig[[i]]))
}


```

```{r}
mean(k_scores_er_fr)
mean(k_scores_ba_fr)
mean(k_scores_ergm_fr)

mean(sdk_scores_er_fr)
mean(sdk_scores_ba_fr)
mean(sdk_scores_ergm_fr)
```

```{r}
#Avg distance and st. dev of distances
d_scores_er_fr <- c()
sdd_scores_er_fr <- c()
for (i in 1:num_networks){
  d_scores_er_fr[i] <- mean_distance(er_list_fr_ig_lc[[i]])
  
  dists <- distances(er_list_fr_ig_lc[[i]])
  avg_dists <- apply(dists, 1, mean)
  sdd_scores_er_fr[i] <- sd(avg_dists)
}

d_scores_ba_fr <- c()
sdd_scores_ba_fr <- c()
for (i in 1:num_networks){
  d_scores_ba_fr[i] <- mean_distance(ba_list_fr_ig_lc[[i]])
  
  dists <- distances(ba_list_fr_ig_lc[[i]])
  avg_dists <- apply(dists, 1, mean)
  sdd_scores_ba_fr[i] <- sd(avg_dists)
}

d_scores_ergm_fr <- c()
sdk_scores_ergm_fr <- c()
for (i in 1:num_networks){
  d_scores_ergm_fr[i] <- mean_distance(ergm2_list_fr_ig_lc[[i]])
  
  dists <- distances(ergm2_list_fr_ig_lc[[i]])
  avg_dists <- apply(dists, 1, mean)
  sdk_scores_ergm_fr[i] <- sd(avg_dists)
}


```

```{r}
mean(d_scores_er_fr)
mean(d_scores_ba_fr)
mean(d_scores_ergm_fr)

mean(sdd_scores_er_fr)
mean(sdd_scores_ba_fr)
mean(sdd_scores_ergm_fr)
```

```{r}
#average clustering and global clustering
avc_scores_er_fr <- c()
glc_scores_er_fr <- c()
for (i in 1:num_networks){
  avc_scores_er_fr[i] <- mean(transitivity(er_list_fr_ig[[i]], type = "local"), na.rm = T)
  glc_scores_er_fr[i] <- transitivity(er_list_fr_ig[[i]])
}

avc_scores_ba_fr <- c()
glc_scores_ba_fr <- c()
for (i in 1:num_networks){
  avc_scores_ba_fr[i] <- mean(transitivity(ba_list_fr_ig[[i]], type = "local"), na.rm = T)
  glc_scores_ba_fr[i] <- transitivity(ba_list_fr_ig[[i]])
}

avc_scores_ergm_fr <- c()
glc_scores_ergm_fr <- c()
for (i in 1:num_networks){
  avc_scores_ergm_fr[i] <- mean(transitivity(ergm2_list_fr_ig[[i]], type = "local"), na.rm = T)
  glc_scores_ergm_fr[i] <- transitivity(ergm2_list_fr_ig[[i]])
}

```

```{r}
mean(avc_scores_er_fr)
mean(avc_scores_ba_fr)
mean(avc_scores_ergm_fr)

mean(glc_scores_er_fr)
mean(glc_scores_ba_fr)
mean(glc_scores_ergm_fr)
```

```{r}
# Compute betweenness centrality 

bet_scores_er_fr <- c()
for (i in 1:num_networks){
  bet_scores_er_fr[i] <- mean(betweenness(er_list_fr_ig_lc[[i]])/(10000^2))
}

bet_scores_ba_fr <- c()
for (i in 1:num_networks){
  bet_scores_ba_fr[i] <- mean(betweenness(ba_list_fr_ig_lc[[i]])/(10000^2))
}

bet_scores_ergm_fr <- c()
for (i in 1:num_networks){
  bet_scores_ergm_fr[i] <- mean(betweenness(ergm2_list_fr_ig_lc[[i]])/(10000^2))
}

```

```{r}
mean(bet_scores_er_fr) %>% format(scientific = TRUE)
mean(bet_scores_ba_fr) %>% format(scientific = TRUE)
mean(bet_scores_ergm_fr) %>% format(scientific = TRUE)
```

```{r}
# Compute closeness centrality 

cl_scores_er_fr <- c()
for (i in 1:num_networks){
  cl_scores_er_fr[i] <- mean(closeness(er_list_fr_ig_lc[[i]]))
}

cl_scores_ba_fr <- c()
for (i in 1:num_networks){
  cl_scores_ba_fr[i] <- mean(closeness(ba_list_fr_ig_lc[[i]]))
}

cl_scores_ergm_fr <- c()
for (i in 1:num_networks){
  cl_scores_ergm_fr[i] <- mean(closeness(ergm2_list_fr_ig_lc[[i]]))
}

```

```{r}
mean(cl_scores_er_fr) %>% format(scientific = TRUE)
mean(cl_scores_ba_fr) %>% format(scientific = TRUE)
mean(cl_scores_ergm_fr) %>% format(scientific = TRUE)
```

```{r}
# Compute eigen centrality 

ei_scores_er_fr <- c()
for (i in 1:num_networks){
  ei_scores_er_fr[i] <- mean(eigen_centrality(er_list_fr_ig_lc[[i]])$vector)
}

ei_scores_ba_fr <- c()
for (i in 1:num_networks){
  ei_scores_ba_fr[i] <- mean(eigen_centrality(ba_list_fr_ig_lc[[i]])$vector)
}

ei_scores_ergm_fr <- c()
for (i in 1:num_networks){
  ei_scores_ergm_fr[i] <- mean(eigen_centrality(ergm2_list_fr_ig_lc[[i]])$vector)
}
```

```{r}
mean(ei_scores_er_fr)
mean(ei_scores_ba_fr)
mean(ei_scores_ergm_fr)
```

```{r}
# Centralization

c1_scores_er_fr <- c()
c2_scores_er_fr <- c()
c3_scores_er_fr <- c()
for (i in 1:num_networks){
  c1_scores_er_fr[i] <- centr_betw(er_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c2_scores_er_fr[i] <- centr_clo(er_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c3_scores_er_fr[i] <- centr_eigen(er_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
}

c1_scores_ba_fr <- c()
c2_scores_ba_fr <- c()
c3_scores_ba_fr <- c()
for (i in 1:num_networks){
  c1_scores_ba_fr[i] <- centr_betw(ba_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c2_scores_ba_fr[i] <- centr_clo(ba_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c3_scores_ba_fr[i] <- centr_eigen(ba_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
}

c1_scores_ergm_fr <- c()
c2_scores_ergm_fr <- c()
c3_scores_ergm_fr <- c()
for (i in 1:num_networks){
  c1_scores_ergm_fr[i] <- centr_betw(ergm2_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c2_scores_ergm_fr[i] <- centr_clo(ergm2_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
  c3_scores_ergm_fr[i] <- centr_eigen(ergm2_list_fr_ig_lc[[i]], 
                                     normalized = TRUE)$centralization
}
```

```{r}
mean(c1_scores_er_fr)
mean(c1_scores_ba_fr)
mean(c1_scores_ergm_fr)

mean(c2_scores_er_fr)
mean(c2_scores_ba_fr)
mean(c2_scores_ergm_fr)

mean(c3_scores_er_fr)
mean(c3_scores_ba_fr)
mean(c3_scores_ergm_fr)

```

```{r}
g1 <- er_list_fr_ig[[1]]
g2 <- ba_list_fr_ig[[1]]
g3 <- ergm2_list_fr_ig[[1]]
```

```{r}
data_ER <- tibble(degree = degree(g1), network_type = "ER")
data_BA <- tibble(degree = degree(g2), network_type = "BA")
data_ERGM <- tibble(degree = degree(g3), network_type = "ERGM")

combined_data <- bind_rows(data_ER, data_BA, data_ERGM)

ggplot(combined_data, aes(x = degree, fill = network_type)) +
  geom_histogram(alpha = 0.6, position = "identity")+
  xlim(0, 30)+
  xlab("Degree") +
  ylab("Frequency") +
  labs(fill = "Network Type")+
   theme(
    legend.position = c(0.8, 0.8))
```

```{r}
data_ER <- tibble(clustering = transitivity(g1, type = "local"), network_type = "ER")
data_BA <- tibble(clustering = transitivity(g2, type = "local"), network_type = "BA")
data_ERGM <- tibble(clustering = transitivity(g3, type = "local"), network_type = "ERGM")

combined_data <- bind_rows(data_ER, data_BA, data_ERGM)

ggplot(combined_data, aes(x = clustering, fill = network_type)) +
  geom_histogram(alpha = 0.6, position = "identity") + 
  xlab("Clustering") +
  ylab("Frequency") +
  labs(fill = "Network Type")+
   theme(
    legend.position = c(0.8, 0.8))
```

```{r}
diameter(g1) 
diameter(g2) 
diameter(g3) 
```

```{r}
d1 <- distances(er_list_fr_ig_lc[[i]])
d1 <- apply(d1, 1, mean)
  
d2 <- distances(ba_list_fr_ig_lc[[i]])
d2 <- apply(d2, 1, mean)
  
d3 <- distances(ergm2_list_fr_ig_lc[[i]])
d3 <- apply(d3, 1, mean)
```

```{r}
data_ER <- tibble(distance = d1, network_type = "ER")
data_BA <- tibble(distance = d2, network_type = "BA")
data_ERGM <- tibble(distance = d3, network_type = "ERGM")

combined_data <- bind_rows(data_ER, data_BA, data_ERGM)

ggplot(combined_data, aes(x = distance, fill = network_type)) +
  geom_histogram(alpha = 0.5, position = "identity")+
  xlab("Distance") +
  ylab("Frequency") +
  labs(fill = "Network Type")+
   theme( legend.position = c(0.8, 0.8))
```

```{r}
tibble(age = get.vertex.attribute(g3, "age_group"),
      degree = degree(g3)) %>% 
  count(age, degree) %>% 
  mutate(freq = n/sum(n))%>% 
  ggplot()+
  geom_col(mapping = aes(x = degree, y = freq, fill = age), position = "fill", width = 0.8)+
  xlab("Degree") + ylab("Relative frequency")+
  xlim(0, 30)
```

```{r}
degreedist(egor_IT_fr, by = "age_group", freq = T) %>% 
  as_tibble() %>% 
  mutate(degree = as.numeric(degree), Age = age_group) %>% 
  uncount(weights = n) %>% 
  ggplot()+
  geom_boxplot(mapping = aes(x = Age, y = degree), alpha = 1)+
  geom_boxplot(data = tibble(Age = get.vertex.attribute(g3, "age_group"),
      degree = degree(g3)), aes(x = Age, y = degree, color = Age), alpha = 0.5)+
  xlab("Age") + ylab("Degree")
```
